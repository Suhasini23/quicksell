{"version":3,"sources":["Component/Button.js","App.js","reportWebVitals.js","index.js"],"names":["Button","useState","count","setCount","maxValue","setMaxValue","error","showError","handleInputChange","value","type","Number","useEffect","className","onChange","e","target","onClick","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sMA0FeA,MAtFf,WAEE,MAA0BC,mBAAS,GAAnC,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAAgCF,mBAAS,KAAzC,mBAAOG,EAAP,KAAiBC,EAAjB,KACA,EAA2BJ,oBAAS,GAApC,mBAAOK,EAAP,KAAcC,EAAd,KAIMC,EAAoB,SAACC,EAAOC,GAChC,GAAa,YAATA,EAAoB,CACtB,GAAGN,EAAYK,EAEb,YADAF,GAAU,GAGZJ,EAASQ,OAAOF,IAChBF,GAAU,OACL,CACD,GAAGE,EAASP,EAEhB,YADAK,GAAU,GAGVF,EAAYM,OAAOF,IACnBF,GAAU,KAkCd,OA9BAK,qBAAU,YACJR,EAAWF,GAGNA,EAAOE,KAFdD,EAAS,GACTI,GAAU,MAKX,CAACH,EAAUF,IAuBZ,gCACE,sBAAKW,UAAU,UAAf,UACA,sBAAKA,UAAU,QAAf,UACE,iEACA,uBACET,SAAUA,EACVM,KAAK,SACLI,SAAU,SAACC,GAAD,OAAOP,EAAkBO,EAAEC,OAAOP,MAAO,iBAGvD,gCACE,mBAAGI,UAAU,QAAb,0CACA,uBACEH,KAAK,SACLI,SAAU,SAACC,GAAD,OAAOP,EAAkBO,EAAEC,OAAOP,MAAO,eAErDH,GAAS,mBAAGO,UAAU,aAAb,qEAIX,sBAAKA,UAAU,iBAAf,UACE,wBAAQA,UAAU,aAAaI,QAjCP,WAC5B,IAAGX,EAAH,CAGA,IAAIG,EAAQE,OAAOT,GACnBO,IACAN,EAASM,KA2BL,eACA,qBAAKI,UAAU,eAAf,SAA+BX,IAC/B,wBAAQW,UAAU,aAAaI,QA5CP,WAC5B,IAAGX,EAAH,CAGA,IAAIG,EAAQE,OAAOT,GACnBO,IACAN,EAASM,KAsCL,sBCxEOS,MATf,WACE,OACE,sBAAKL,UAAU,MAAf,UACE,yCACN,cAAC,EAAD,QCKeM,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,K","file":"static/js/main.e712f15d.chunk.js","sourcesContent":["\n\nimport React, { useState, useEffect } from 'react';\n\nfunction Button() {\n  // Declare a new state variable, which we'll call \"count\"\n  const [count, setCount] = useState(1);\n  const [maxValue, setMaxValue] = useState(1000);\n  const [error, showError] = useState(false);\n\n\n\n  const handleInputChange = (value, type) => {\n    if (type === \"default\") {\n      if(maxValue <  value){\n        showError(true);\n        return\n      }\n      setCount(Number(value))\n      showError(false)\n    } else {  \n          if(value <  count){\n      showError(true);\n      return\n    } \n      setMaxValue(Number(value))\n      showError(false)\n    }\n  }\n\n  useEffect(() => {\n    if (maxValue < count) {\n      setCount(1)\n      showError(true)\n    }else if(count> maxValue){\n      setCount(1)\n      showError(true)\n    }\n  }, [maxValue, count])\n\n  const handleIncrementChange = () => {\n    if(error){\n      return\n    }\n    let value = Number(count);\n    value++;\n    setCount(value)\n  }\n\n  const handleDecrementChange = () => {\n    if(error){\n      return\n    }\n    let value = Number(count);\n    value--;\n    setCount(value)\n  }\n\n\n\n  return (\n    <div>\n      <div className=\"wrapper\">\n      <div className=\"title\">\n        <p>Enter default value for counter:</p>\n        <input\n          maxValue={maxValue}\n          type=\"number\"\n          onChange={(e) => handleInputChange(e.target.value, \"default\")}\n        />\n      </div>\n      <div>\n        <p className=\"title\">Enter Max value for counter:</p>\n        <input\n          type=\"number\"\n          onChange={(e) => handleInputChange(e.target.value, \"maxValue\")}\n        />\n      { error && <p className=\"error-text\">*You can't add Max value less than default value.</p>}\n      </div>\n      </div>\n   \n      <div className=\"button-wrapper\">\n        <button className=\"sub-button\" onClick={handleDecrementChange}>-</button>\n        <div className=\"text-wrapper\">{count}</div>\n        <button className=\"add-button\" onClick={handleIncrementChange}>+</button>\n      </div>\n    </div>\n  );\n}\n\nexport default Button;\n\n","import './App.css';\nimport Button from './Component/Button'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <h1>Counter</h1>\n<Button/>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}